@using Axians.Web.Data
<div class="row select-tax">
    <div class="col-12">
        <div class="row mb-2">
            <div class="col-12">
                <span class="type-text">Taxa *</span>
            </div>
        </div>
        <div class="row mb-2">
            <div class="col-lg-9 col-md-8 col-sm-12 d-flex align-items-center">
                <span class="form-label mb-0 me-2 type-label">Adicionar taxa por localização</span>
                <div class="form-check form-switch custom-switch">
                    <input class="form-check-input" type="checkbox" role="switch" @onchange="HandleToggleChanged" checked="@selectedTax.Tax.AddTaxLocation" id="flexSwitchCheckChecked">
                    <label class="form-check-label" for="flexSwitchCheckChecked"></label>
                </div>
            </div>
            <div class="col-lg-3 col-md-4 col-sm-12 d-flex justify-content-lg-end justify-content-md-end justify-content-sm-start mt-sm-2 mt-md-0">
                <button class="add-tax-button">
                    <i class="fa-solid fa-plus"></i> Adicionar Taxa
                </button>
            </div>
        </div>
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col" class="col-1">
                            <input type="checkbox" class="check-large" @onchange="ToggleSelectAll" />
                        </th>
                        <th scope="col" class="col-3">NUTS II</th>
                        <th scope="col" class="col-3">NUTS III</th>
                        <th scope="col" class="col-4">Concelho</th>
                        <th scope="col" class="col-1">Taxa (%)</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @if (PaginatedNuts != null)
                    {
                        @foreach (var nuts in PaginatedNuts)
                        {
                            <tr>
                                <td>
                                    <input type="checkbox" class="check-large" value="@nuts.Id" checked="@selectedNutsIds.Contains(nuts.Id)" @onchange="(e) => HandleCheckboxChanged(nuts.Id, (bool)e.Value)" />
                                </td>
                                <td>@nuts.Nuts2</td>
                                <td>@nuts.Nuts3</td>
                                <td>@nuts.Concelho</td>
                                <td>@nuts.Tax</td>
                                <td><button class="btn btn-outline"><i class="fa fa-trash trash-color"></i></button></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <div class="d-flex flex-column flex-lg-row justify-content-between align-items-lg-center mt-2">
            <div class="d-flex align-items-center justify-content-between gap-3 mb-2 mb-lg-0">
                <div>@currentPage de @totalPages páginas (@selectedTax.Tax.Nuts.Count itens)</div>
                <div class="d-flex align-items-center gap-2">
                    <select class="form-select" style="width: auto;" @bind="itemsPerPage" @bind:event="onchange">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                    </select>
                    <span>itens por página</span>
                </div>
            </div>
            <nav>
                <ul class="pagination mb-0">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="javascript:void(0)" @onclick="() => FirstPage()">&laquo;&laquo;</a>
                    </li>
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="javascript:void(0)" @onclick="PreviousPage">&laquo;</a>
                    </li>
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        <li class="page-item @(currentPage == i ? "active" : "")">
                            <a class="page-link" href="javascript:void(0)" @onclick="() => GoToPage(i)">@i</a>
                        </li>
                    }
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <a class="page-link" href="javascript:void(0)" @onclick="NextPage">&raquo;</a>
                    </li>
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <a class="page-link" href="javascript:void(0)" @onclick="() => LastPage()">&raquo;&raquo;</a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

@code {
    [Parameter] public Option selectedTax { get; set; }
    [Parameter] public EventCallback<Option> OnTaxUpdated { get; set; }

    private List<int> selectedNutsIds = new List<int>();
    private int itemsPerPage = 10;
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)(selectedTax?.Tax?.Nuts?.Count ?? 0) / itemsPerPage);
    private IEnumerable<Nut> PaginatedNuts => GetPaginatedNuts();

    private IEnumerable<Nut> GetPaginatedNuts()
    {
        return selectedTax.Tax.Nuts.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage) ?? Enumerable.Empty<Nut>();
    }

    private void HandleToggleChanged(ChangeEventArgs e)
    {
        selectedTax.Tax.AddTaxLocation = (bool)e.Value;
        StateHasChanged();
    }

    private void HandleCheckboxChanged(int id, bool isSelected)
    {
        if (isSelected)
        {
            if (!selectedNutsIds.Contains(id))
            {
                selectedNutsIds.Add(id);
            }
        }
        else
        {
            selectedNutsIds.Remove(id);
        }
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        bool isChecked = (bool)e.Value;

        if (isChecked)
        {
            foreach (var nuts in PaginatedNuts)
            {
                if (!selectedNutsIds.Contains(nuts.Id))
                {
                    selectedNutsIds.Add(nuts.Id);
                }
            }
        }
        else
        {
            foreach (var nuts in PaginatedNuts)
            {
                selectedNutsIds.Remove(nuts.Id);
            }
        }
    }
    
    private void UpdatePagination()
    {
        currentPage = Math.Min(currentPage, totalPages);
    }

    private void FirstPage()
    {
        if (currentPage != 1)
        {
            currentPage = 1;
        }
    }

    private void LastPage()
    {
        if (currentPage != totalPages)
        {
            currentPage = totalPages;
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= totalPages)
        {
            currentPage = pageNumber;
        }
    }
}
