@page "/Avisos"
@using Axians.Web.Data

<PageTitle>Avisos</PageTitle>

<div class="row">
    <div class="col-md-12">
        <Header />
    </div>
</div>

<div class="row">
    <div class="col-md-3 g-5">
        <div class="list-option">
            @foreach (var option in Options)
            {
                <OptionItem Option="option" IsSelected="option == selectedOption" OnOptionSelected="HandleOptionSelected" />
            }
        </div>
    </div>

    <div class="col-md-9 g-5">
        <div class="row">
            <div class="col-md-12">
                @if (selectedOption is not null)
                {
                    <OptionHeader CurrentOption="selectedOption!" IsFirstOption="IsFirstOption" IsLastOption="IsLastOption" OnPrevious="GoToPrevious" OnNext="GoToNext" />
                    <br />
                    <TaxSelector SelectedTaxId="@selectedTaxId" OnTaxSelected="HandleTaxSelection" />
                    <br />
                    <Count OptionWithCount="@selectedOption" OnTaxSelected="HandleTaxRadioSelection" />
                }
            </div>
        </div>
    </div>
</div>

@code {
    private Option selectedOption;
    private string selectedTaxId => selectedOption?.TaxType?.Id.ToString(); // Diretamente derivado de selectedOption

    public int CurrentIndex { get; set; } = 0;

    // Propriedades calculadas para facilitar a navegação
    private bool IsFirstOption => CurrentIndex == 0;
    private bool IsLastOption => CurrentIndex == Options.Count - 1;

    private void HandleOptionSelected(Option option)
    {
        SetSelectedOption(option);
    }

    private void GoToPrevious()
    {
        if (!IsFirstOption)
        {
            SetSelectedOptionByIndex(CurrentIndex - 1);
        }
    }

    private void GoToNext()
    {
        if (!IsLastOption)
        {
            SetSelectedOptionByIndex(CurrentIndex + 1);
        }
    }

    // Define a opção selecionada e atualiza o estado
    private void SetSelectedOptionByIndex(int index)
    {
        var option = Options.ElementAtOrDefault(index);
        SetSelectedOption(option);
        CurrentIndex = index; // Atualiza o índice da opção selecionada
    }

    private void SetSelectedOption(Option option)
    {
        selectedOption = option;
        StateHasChanged(); // Atualiza a UI ao selecionar nova opção
    }

    // Atualiza o TaxType baseado na seleção do usuário
    private void HandleTaxSelection(string taxId)
    {
        selectedOption.TaxType = new TaxType { Id = int.Parse(taxId), Value = taxId == "1" ? "Fixa" : "Variável" };
    }

    // Atualiza o valor de Count (Sim/Não) na opção
    private void HandleTaxRadioSelection(bool isSelected)
    {
        selectedOption.Count = isSelected;
    }

    // Exemplo de dados de opções
    public List<Option> Options { get; set; } = new List<Option>
    {
        new() { Id = 0, Name = "Opção 1", Check = true, TaxType = new TaxType() { Id = 1, Value = "Fixa" }, Count = true },
        new() { Id = 1, Name = "Opção 2", Check = true, TaxType = new TaxType() { Id = 2, Value = "Variável" }, Count = false },
    };
}

